import{bP as I,bQ as T,dM as $,dp as M,dq as O,dr as E,dN as R,dO as P,ay as F,dF as v,bs as f,dP as L,M as b,aE as N,b2 as j,dQ as U,N as x,b as q,d as s,y as p,dR as S,aZ as J,aR as A,du as _,f as k,bT as V,dS as Z}from"./index-BAXfM_uJ.js";import{i as z}from"./scaleUtils-j7I0RB9c.js";import{m as B,f as C,Y as D}from"./SublayersOwner-DeemodqE.js";import{f as G}from"./RefreshableLayer-DrAlOL41.js";import{f as H}from"./TemporalLayer-BG6X0uKk.js";import{m as K}from"./ExportImageParameters-Oj320uer.js";import{t as W}from"./imageBitmapUtils-CJRnG_3Y.js";import{e as w}from"./sublayerUtils-Bza1MorI.js";import{e as Q}from"./versionUtils-DNeDk30d.js";import"./Version-0wqbwohZ.js";import"./UniqueValueRenderer-C2774iKt.js";import"./ColorStop-CYvwI_SD.js";import"./diffUtils-D0Abfze1.js";import"./colorRamps-CxZ6YTU7.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-B39cqevf.js";import"./jsonUtils-C4pva3eo.js";import"./styleUtils-DOoSumMw.js";import"./jsonUtils-P2UFokEo.js";import"./FieldsIndex-BogHxZSV.js";import"./UnknownTimeZone-DO4n5jr0.js";import"./OverrideHelper-DddahwSP.js";import"./utils-CZr2hS-L.js";import"./quantizationUtils-Cv3RJnb9.js";import"./heatmapUtils-DD8awBru.js";import"./QueryTask-COz62-rg.js";import"./infoFor3D-DsOdlPuA.js";import"./executeForIds-CPbHsKG5.js";import"./query-Dj5fGRpU.js";import"./pbfQueryUtils-DgM7AnKG.js";import"./pbf-CiSiMmmE.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-NqRhGUHK.js";import"./executeQueryJSON-CjndTUxh.js";import"./FeatureSet-D_J5u5o2.js";import"./executeQueryPBF-CczPhoyP.js";import"./featureConversionUtils-DF5IXvnx.js";import"./FeatureType-C_czELHw.js";import"./FeatureTemplate-DoiRvPGI.js";import"./LabelClass-C-FXIX12.js";import"./labelUtils-DUfAMCpr.js";import"./defaultsJSON-CHAaurhX.js";import"./labelingInfo-DNlevxUR.js";import"./LayerFloorInfo-BTSL4fMK.js";import"./serviceCapabilitiesUtils-ChOQW4wO.js";import"./AttachmentQuery-jO6uajrF.js";import"./popupUtils-CIbThfza.js";import"./TimeInfo-B6KGddfq.js";import"./floorFilterUtils-DZ5C6FQv.js";let r=class extends I(H(T(B(C($(M(O(E(G(R(P(V)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(F).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const m=i.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,m,t){var y,d,h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let n=!1;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;n=w(a,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");n=w(a,g.sublayers,v(g.origin))}}const l=[],u={writeSublayerStructure:n,...t};let c=n;a.forEach(o=>{const g=o.write({},u);l.push(g),c=c||o.originOf("visible")==="user"}),l.some(o=>Object.keys(o).length>1)&&(i.layers=l),c&&(i.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,i,m,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new K({layer:this,floors:t==null?void 0:t.floors,scale:z({extent:e,width:i})*a}),l=n.toJSON();n.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,y=L(c);l.dpi*=a;const d={};if(t!=null&&t.timeExtent){const{start:h,end:o}=t.timeExtent.toJSON();d.time=h&&o&&h===o?""+h:`${h??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:i+","+m,...l,...u,...d}}async fetchImage(e,i,m,t){const{data:a}=await this._fetchImage("image",e,i,m,t);return a}async fetchImageBitmap(e,i,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,i,m,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await b(this.url,i),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&N.fromJSON(l),timeExtent:n&&j.fromJSON({start:n[0],end:n[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,i,m,t,a){var u,c,y;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((u=n.query)==null?void 0:u.dynamicLayers)!=null&&!((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:d}=await b(l,n);return{data:d,url:l}}catch(d){throw q(d)?d:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:m}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([p()],r.prototype,"dpi",void 0),s([p()],r.prototype,"gdbVersion",void 0),s([p()],r.prototype,"imageFormat",void 0),s([J("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([p()],r.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([p(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([p()],r.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([A("sublayers",{layers:{type:[D]},visibleLayers:{type:[Z]}})],r.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([p(_)],r.prototype,"url",void 0),r=s([k("esri.layers.MapImageLayer")],r);const He=r;export{He as default};
