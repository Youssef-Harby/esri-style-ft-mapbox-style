import{$ as m,j as o}from"./utils-DzhNihxx.js";import{ei as c,ej as p,el as i,en as u}from"./index-BkV_HQRW.js";import"./originUtils-D69mHv66.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./saveAPIKeyUtils-CzGEukrf.js";import"./saveUtils-BmBGvZ1R.js";const s="Image Service",g="imagery-layer-save",v="imagery-layer-save-as",f="imagery-tile-layer-save",d="imagery-tile-layer-save-as";function l(a){var t;if(a.type==="imagery")return{isValid:!0};const{raster:e}=a,r=(e==null?void 0:e.datasetFormat)==="Function"?(t=e.primaryRasters)==null?void 0:t.rasters[0]:e;return{isValid:(r==null?void 0:r.datasetFormat)==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"),errorMessage:"imagery tile layer should be created from a tiled image service."}}function n(a){const e=a.layerJSON;return Promise.resolve(e&&Object.keys(e).length?e:null)}async function T(a,e){const{parsedUrl:r,title:t,fullExtent:y}=a;e.url=r.path,e.title||(e.title=t);try{e.extent=await c(y)}catch{e.extent=void 0}p(e,i.METADATA),a.type==="imagery-tile"&&u(e,i.TILED_IMAGERY)}async function M(a,e){const r=a.type==="imagery"?g:f;return m({layer:a,itemType:s,validateLayer:l,createItemData:n,errorNamePrefix:r},e)}async function P(a,e,r){const t=a.type==="imagery"?v:d;return o({layer:a,itemType:s,validateLayer:l,createItemData:n,errorNamePrefix:t,newItem:e,setItemProperties:T},r)}export{M as save,P as saveAs};
