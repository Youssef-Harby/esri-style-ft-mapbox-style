import{d as a,f as n,g as d,P as u,z as l}from"./index-CsUFEoah.js";import{X as g}from"./FeatureLayerView2D-DJqbqzGZ.js";import"./diffUtils-DTfem5XL.js";import"./Container-DvsDccG0.js";import"./parser-D7tIHZo0.js";import"./highlightReasons-Dxnv-bT3.js";import"./definitions-C14Q9bsB.js";import"./enums-CYMvjYBC.js";import"./Texture-DAjwpx98.js";import"./FeatureEffect-CSOxBIaq.js";import"./jsonUtils-D2YmUXMm.js";import"./FeatureSet-D3YMrh1Z.js";import"./LayerView-CZ6evVXq.js";import"./scaleUtils-CKMLvBHQ.js";import"./TechniqueInstance-Cdityb-A.js";import"./UpdateTracking2D-DhYnXUH7.js";import"./TurboLine-FHqvtXXo.js";import"./enums-BRqP_wXA.js";import"./earcut-B92UyuuV.js";import"./GeometryUtils-CaaFuTFm.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./utils-DeNwuiN2.js";import"./Rect-CUzevAry.js";import"./LabelMetric-DPYy6bPZ.js";import"./Program-DOqJBPKv.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./labelUtils-897NphYI.js";import"./defaultsJSON-CHAaurhX.js";import"./BindType-BmZEZMMh.js";import"./Util-BO8YZvBY.js";import"./vec42-C3rPPDSS.js";import"./vec4f64-CCf6w8sj.js";import"./constants-D5zmR9t2.js";import"./TileContainer-q5S35EOL.js";import"./WGLContainer-yEB4so09.js";import"./ProgramTemplate-ChnYclWB.js";import"./StyleDefinition-pu9RBNlY.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-BjpcOb89.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./tileUtils-B7X19rIS.js";import"./lengthUtils-D_y24jhC.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./OrderByInfo-D08Vu_-r.js";import"./labelingInfo-BlCJ1E0M.js";import"./LabelClass-GX6nV07j.js";import"./jsonUtils-IOVjZB4I.js";import"./heatmapUtils-Ca5may50.js";import"./SDFHelper-DanLHzns.js";import"./floatRGBA-DSFftzoJ.js";import"./FeatureCommandQueue-BjPeZdOM.js";import"./HighlightCounter-BcJ6a7ol.js";import"./commonProperties-C-6_1J3u.js";import"./ElevationInfo-DoYTEsSv.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-BSybU6p2.js";import"./RefreshableLayerView-BqMHEva3.js";let i=class extends g{initialize(){this.addHandles([d(()=>this.view.scale,()=>this._update(),u)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(s=>s.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredFieldsPromise!=null,p=!this._worker,m=this.dataUpdating,e=t&&(r||o||p||m);return l("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=a([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const yi=i;export{yi as default};
